
Challenge_ISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001e8  2**0
                  ALLOC
  2 .stab         000003cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006c2  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_18>:
#include<avr/io.h>
#include<avr/interrupt.h>

unsigned char g_num = 0;

ISR(INT2_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

	if((PORTC & 0x0F) == 9){
  9a:	e5 e3       	ldi	r30, 0x35	; 53
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 2f       	mov	r24, r24
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	90 70       	andi	r25, 0x00	; 0
  a8:	89 30       	cpi	r24, 0x09	; 9
  aa:	91 05       	cpc	r25, r1
  ac:	91 f4       	brne	.+36     	; 0xd2 <__vector_18+0x56>
		g_num = (g_num & 0xF0);
  ae:	80 91 60 00 	lds	r24, 0x0060
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	80 93 60 00 	sts	0x0060, r24
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  b8:	a5 e3       	ldi	r26, 0x35	; 53
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e5 e3       	ldi	r30, 0x35	; 53
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	98 2f       	mov	r25, r24
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	80 91 60 00 	lds	r24, 0x0060
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	8c 93       	st	X, r24
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__vector_18+0x78>
	}
	else{
		g_num++;
  d2:	80 91 60 00 	lds	r24, 0x0060
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 60 00 	sts	0x0060, r24
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  dc:	a5 e3       	ldi	r26, 0x35	; 53
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e5 e3       	ldi	r30, 0x35	; 53
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	98 2f       	mov	r25, r24
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	89 2b       	or	r24, r25
  f2:	8c 93       	st	X, r24
	}
}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <INT2_Init>:

void INT2_Init(void){
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	DDRB &= (~(1<<PB2));		//	Configure PIN PB2 as input
 116:	a7 e3       	ldi	r26, 0x37	; 55
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e7 e3       	ldi	r30, 0x37	; 55
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC2);			// Trigger INT2 with rising edge
 124:	a5 e5       	ldi	r26, 0x55	; 85
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e5 e5       	ldi	r30, 0x55	; 85
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	8c 93       	st	X, r24
	GICR |= (1<<INT2);			// Enable external interrupt PIN INT2
 132:	ab e5       	ldi	r26, 0x5B	; 91
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	eb e5       	ldi	r30, 0x5B	; 91
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	8c 93       	st	X, r24
	SREG |= (1<<7);
 140:	af e5       	ldi	r26, 0x5F	; 95
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ef e5       	ldi	r30, 0x5F	; 95
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	8c 93       	st	X, r24
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <main>:

int main(void){
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62

	DDRC = 0x0F;				// Configure first 4 pins of PORTC as output
 15c:	e4 e3       	ldi	r30, 0x34	; 52
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	80 83       	st	Z, r24
	PORTC = 0x00;				// Initialize first 4 pins of PORTC with 0
 164:	e5 e3       	ldi	r30, 0x35	; 53
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	10 82       	st	Z, r1


	INT2_Init();
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <INT2_Init>
 16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0x1a>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
